# -*- coding: utf-8 -*-
"""Act1-BIGDATA-Measures

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VI5Rj3yfQLPFnShaQfu5PYX_b6bcQBWs
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
plt.rcParams['figure.figsize'] = (15, 10)

HDHT22 = pd.read_csv("H-DHT22-measures.csv")
HTU21 = pd.read_csv("H-HTU21-measures.csv")
BMP280 = pd.read_csv("P-BMP280-measures.csv")
TBMP280 = pd.read_csv("T-BMP280-measures.csv")
DHT11 = pd.read_csv("T-DHT11-measures.csv")
DHT22 = pd.read_csv("T-DHT22-measures.csv")

"""#CSV MANAGEMENT

##H-DHT22
"""

HDHT22.head()

HDHT22.time = pd.to_datetime(HDHT22.time)

HDHT22.count()

HDHT22.info()

HDHT22['value'].value_counts(dropna=False)

HDHT22.isnull().values.any()

"""By watching the plot we can say that this sensor is not working well and we are not going to use it after concat the data"""

HDHT22.plot(x='time', y='value')

"""##H-HTU21"""

HTU21.head()

HTU21.time = pd.to_datetime(HTU21.time)

HTU21.columns

HTU21.count()

HTU21.info()

HTU21.describe()

HTU21.isnull().values.any()

HTU21.plot(x='time', y='value')

"""##P-BMP280"""

BMP280.head()

BMP280.time = pd.to_datetime(BMP280.time)

BMP280.columns

BMP280.count()

BMP280.info()

BMP280.describe()

BMP280.isnull().values.any()

BMP280.plot(x='time', y='value')

"""##T-BMP280"""

TBMP280.head()

TBMP280.time = pd.to_datetime(TBMP280.time)

TBMP280.columns

TBMP280.count()

TBMP280.info()

TBMP280.describe()

TBMP280.isnull().values.any()

TBMP280.plot(x='time', y='value')

"""##T-DHT11"""

DHT11.head()

DHT11.time = pd.to_datetime(DHT11.time)

DHT11.value = DHT11.value.astype(float)

DHT11.columns

DHT11.count()

DHT11.info()

DHT11.describe()

DHT11.isnull().values.any()

DHT11.plot(x='time', y='value')

"""##T-DHT22"""

DHT22.head()

DHT22.time = pd.to_datetime(DHT22.time)

DHT22.columns

DHT22.count()

DHT22.info()

DHT22.describe()

DHT22.isnull().values.any()

DHT22.plot(x='time', y='value')

"""##Concatenation of all csv
The H-DHT22 does not seem to be correct, so we don't concatenate it
"""

allDatacsv = pd.concat([HTU21,BMP280,TBMP280,DHT11,DHT22])

allDatacsv.info()

allDatacsv.count()

allDatacsv.isnull().values.any()

"""#JSON MANAGEMENT

##H-DHT11
"""

DHT11json = pd.read_json("H-DHT11-measures.json", lines = True, orient="values")

DHT11json.head()

DHT11json.time = pd.to_datetime(DHT11json.time)

DHT11json.value = DHT11json.value.astype(float)

DHT11json.count()

DHT11json.describe()

DHT11json.info()

DHT11json['sensor'].value_counts(dropna=False)

DHT11json['value'].value_counts(dropna=False)

DHT11json.plot(x='time', y='value')

"""##P-DM280
It has just 4 json entries
"""

PDM280json = pd.read_json("P-DM280-measures.json", lines = True, orient="values")

PDM280json.head()

PDM280json.time = pd.to_datetime(PDM280json.time)

PDM280json.count()

PDM280json.describe()

PDM280json.info()

PDM280json['sensor'].value_counts(dropna=False)

PDM280json['time'].value_counts(dropna=False)

PDM280json['value'].value_counts(dropna=False)

PDM280json.plot(x='time', y='value')

"""##T-DM280
It has just 4 json entries
"""

TDM280json = pd.read_json("T-DM280-measures.json", lines = True, orient="values")

TDM280json.head()

TDM280json.time = pd.to_datetime(TDM280json.time)

TDM280json.count()

TDM280json.describe()

TDM280json.info()

TDM280json['sensor'].value_counts(dropna=False)

TDM280json['time'].value_counts(dropna=False)

TDM280json['value'].value_counts(dropna=False)

TDM280json.value=pd.to_numeric(TDM280json.value)

TDM280json.plot(x='time', y='value')

"""##T-HTU21"""

HTU21json = pd.read_json("T-HTU21-measures.json", lines = True, orient="values")

HTU21json.count()

HTU21json.head()

HTU21json.time = pd.to_datetime(HTU21json.time)

HTU21json.info()

HTU21json.describe()

HTU21json.plot(x='time', y='value')

"""##Concatenation of json data
 2 of the jsons just have 4 rows of data, we won't concatenate them because of lack of utility
"""

allDatajson = pd.concat([DHT11json,HTU21json])

allDatajson.head()

allDatajson.count()

allDatajson.info()

allDatajson.describe()

"""#Concatenation of all data"""

allData = pd.concat([allDatajson,allDatacsv])

allData.count()

allData.info()

allData.describe()

allData.isnull().all()

allData['sensor'].value_counts(dropna=False)

allData['value'].value_counts(dropna=False)

print(allData.shape[0])

allData.isnull().values.any()

missing = pd.DataFrame(allData.isna().sum()).rename(columns = {0: 'total'})
missing['percent'] = missing['total'] / len(allData)
print(missing)