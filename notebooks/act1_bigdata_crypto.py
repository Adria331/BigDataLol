# -*- coding: utf-8 -*-
"""Act1-BIGDATA-Crypto.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xxSPjF37lbXYHZb4_RuqtkFXBH6Tdx9_
"""

import pandas as pd
import numpy as np
# %matplotlib inline
import matplotlib.pyplot as plt
import seaborn as sns
from array import array

#cryptocoins: different coins
bitcoin_dataset = pd.read_csv("bitcoin_dataset.csv")
eth_datas = pd.read_csv("ethereum_dataset.csv")
numer_price = pd.read_csv("numeraire_price.csv")
bitcoin_cash_price = pd.read_csv("bitcoin_cash_price.csv")
ethereum_price = pd.read_csv("ethereum_price.csv")
omisego_price = pd.read_csv("omisego_price.csv")
iota_price = pd.read_csv("iota_price.csv")
qtum_price = pd.read_csv("qtum_price.csv")
bitcoin_price = pd.read_csv("bitcoin_price.csv")
litecoin_price = pd.read_csv("litecoin_price.csv")
ripple_price = pd.read_csv("ripple_price.csv")
bitconnect_price = pd.read_csv("bitconnect_price.csv")
monero_price = pd.read_csv("monero_price.csv")
stratis_price = pd.read_csv("stratis_price.csv")
dash_price = pd.read_csv("dash_price.csv")
nem_price = pd.read_csv("nem_price.csv")
waves_price = pd.read_csv("waves_price.csv")
eth_class_price = pd.read_csv("ethereum_classic_price.csv")
neo_price = pd.read_csv("neo_price.csv")

"""For each dataset, we will analyze a little and replace all the NaNs they have in their data by 0.0.
If the data doesn't contains NaN's, it will remain equal.
Firstly we will see the main data in each dataset, then count the number of values for each column, if we see something strange, we will see how many data is missing and replace it, if necessary.
"""

bitcoin_dataset.head()

bitcoin_dataset.describe()

bitcoin_dataset.count()

missingBc = pd.DataFrame(bitcoin_dataset.isna().sum()).rename(columns = {0: 'total'})
missingBc['percent'] = missingBc['total'] / len(bitcoin_dataset)
missingBc

bc_dataset_clean = bitcoin_dataset.fillna(0.0)
missingBcClean = pd.DataFrame(bc_dataset_clean.isna().sum()).rename(columns = {0: 'total'})
missingBcClean['percent'] = missingBcClean['total'] / len(bc_dataset_clean)
missingBcClean

eth_datas.head()

eth_datas.describe()

eth_datas.count()

missingEthDatas = pd.DataFrame(eth_datas.isna().sum()).rename(columns = {0: 'total'})
missingEthDatas['percent'] = missingEthDatas['total'] / len(eth_datas)
missingEthDatas

eth_dataset_clean = eth_datas.fillna(0.0)
missingEthDatasClean = pd.DataFrame(eth_dataset_clean.isna().sum()).rename(columns = {0: 'total'})
missingEthDatasClean['percent'] = missingEthDatasClean['total'] / len(eth_dataset_clean)
missingEthDatasClean

numer_price.head()

numer_price.describe()

numer_price.count()

missingNumer = pd.DataFrame(numer_price.isna().sum()).rename(columns = {0: 'total'})
missingNumer['percent'] = missingNumer['total'] / len(numer_price)
missingNumer

bitcoin_cash_price.head()

bitcoin_cash_price.describe()

bitcoin_cash_price.count()

missingBcCash = pd.DataFrame(bitcoin_cash_price.isna().sum()).rename(columns = {0: 'total'})
missingBcCash['percent'] = missingBcCash['total'] / len(bitcoin_cash_price)
missingBcCash

ethereum_price.head()

ethereum_price.describe()

ethereum_price.count()

missingEthPrice = pd.DataFrame(ethereum_price.isna().sum()).rename(columns = {0: 'total'})
missingEthPrice['percent'] = missingEthPrice['total'] / len(ethereum_price)
missingEthPrice

omisego_price.head()

omisego_price.describe()

omisego_price.count()

missingOmiPrice = pd.DataFrame(omisego_price.isna().sum()).rename(columns = {0: 'total'})
missingOmiPrice['percent'] = missingOmiPrice['total'] / len(omisego_price)
missingOmiPrice

iota_price.head()

iota_price.describe()

iota_price.count()

missingIotaPrice = pd.DataFrame(iota_price.isna().sum()).rename(columns = {0: 'total'})
missingIotaPrice['percent'] = missingIotaPrice['total'] / len(iota_price)
missingIotaPrice

qtum_price.head()

qtum_price.describe()

qtum_price.count()

missingQtumPrice = pd.DataFrame(qtum_price.isna().sum()).rename(columns = {0: 'total'})
missingQtumPrice['percent'] = missingQtumPrice['total'] / len(qtum_price)
missingQtumPrice

bitcoin_price.head()

bitcoin_price.describe()

bitcoin_price.count()

missingBcPrice = pd.DataFrame(bitcoin_price.isna().sum()).rename(columns = {0: 'total'})
missingBcPrice['percent'] = missingBcPrice['total'] / len(bitcoin_price)
missingBcPrice

litecoin_price.head()

litecoin_price.describe()

litecoin_price.count()

missingLcPrice = pd.DataFrame(litecoin_price.isna().sum()).rename(columns = {0: 'total'})
missingLcPrice['percent'] = missingLcPrice['total'] / len(litecoin_price)
missingLcPrice

ripple_price.head()

ripple_price.describe()

ripple_price.count()

missingRipplePrice = pd.DataFrame(ripple_price.isna().sum()).rename(columns = {0: 'total'})
missingRipplePrice['percent'] = missingRipplePrice['total'] / len(ripple_price)
missingRipplePrice

bitconnect_price.head()

bitconnect_price.describe()

bitconnect_price.count()

missingbtConnectPrice = pd.DataFrame(bitconnect_price.isna().sum()).rename(columns = {0: 'total'})
missingbtConnectPrice['percent'] = missingbtConnectPrice['total'] / len(bitconnect_price)
missingbtConnectPrice

monero_price.head()

monero_price.describe()

monero_price.count()

missingMonneroPrice = pd.DataFrame(monero_price.isna().sum()).rename(columns = {0: 'total'})
missingMonneroPrice['percent'] = missingMonneroPrice['total'] / len(monero_price)
missingMonneroPrice

monero_dataset_clean = monero_price.fillna(0.0)
missingMoneroClean = pd.DataFrame(monero_dataset_clean.isna().sum()).rename(columns = {0: 'total'})
missingMoneroClean['percent'] = missingMoneroClean['total'] / len(monero_dataset_clean)
missingMoneroClean

stratis_price.head()

stratis_price.describe()

stratis_price.count()

missingStratisPrice = pd.DataFrame(stratis_price.isna().sum()).rename(columns = {0: 'total'})
missingStratisPrice['percent'] = missingStratisPrice['total'] / len(stratis_price)
missingStratisPrice

dash_price.head()

dash_price.describe()

dash_price.count()

missingDashPrice = pd.DataFrame(dash_price.isna().sum()).rename(columns = {0: 'total'})
missingDashPrice['percent'] = missingDashPrice['total'] / len(dash_price)
missingDashPrice

nem_price.head()

nem_price.describe()

nem_price.count()

missingNemPrice = pd.DataFrame(nem_price.isna().sum()).rename(columns = {0: 'total'})
missingNemPrice['percent'] = missingNemPrice['total'] / len(nem_price)
missingNemPrice

waves_price.head()

waves_price.describe()

waves_price.count()

missingWavesPrice = pd.DataFrame(waves_price.isna().sum()).rename(columns = {0: 'total'})
missingWavesPrice['percent'] = missingWavesPrice['total'] / len(waves_price)
missingWavesPrice

eth_class_price.head()

eth_class_price.describe()

eth_class_price.count()

missingEthClassPrice = pd.DataFrame(eth_class_price.isna().sum()).rename(columns = {0: 'total'})
missingEthClassPrice['percent'] = missingEthClassPrice['total'] / len(eth_class_price)
missingEthClassPrice

neo_price.head()

neo_price.describe()

neo_price.count()

missingNeoPrice = pd.DataFrame(neo_price.isna().sum()).rename(columns = {0: 'total'})
missingNeoPrice['percent'] = missingNeoPrice['total'] / len(neo_price)
missingNeoPrice

"""Now we have all the data with values, we wil group them in a dictionary to make it easy for us to analyze the data. 
The next step will be to search for the object values and replace them for ints.
"""

datasets = {}

datasets['Neo'] = neo_price
datasets['EthereumClassic'] = eth_class_price
datasets['Waves'] = waves_price
datasets['Nem'] = nem_price
datasets['Dash'] = dash_price
datasets['Stratis'] = stratis_price
datasets['Monero'] = monero_dataset_clean
datasets['Bitconnect'] = bitconnect_price
datasets['Ripple'] = ripple_price
datasets['Litecoin'] = litecoin_price
datasets['Bitcoin'] = bitcoin_price
datasets['Iota'] = iota_price
datasets['Ethereum'] = ethereum_price
datasets['EthereumDSClean'] = eth_dataset_clean
datasets['BitcoinDSClean'] = bc_dataset_clean
#datasets[''] = bitcoin_cash_price // 45 values only
#datasets[''] = numer_price // 30 values only
#datasets[''] = omisego_price // 30 values only
#datasets[''] = qtum_price // 30 values only

"""As we can see, we discarded a few ones for the little amount of data that they provide. Now let's proceed changing object types to floats.
In the next cell we see that the fields Volume and Market Cap appears in almost every dataset with wrong datatypes, so we will access to each one, check if those fields exists and parse them. At the same time, we will parse the 'Data' field for each dataset.
"""

#cryptocoins: different coins
bitcoin_dataset.info()
eth_datas.info()
numer_price.info()
bitcoin_cash_price.info()
ethereum_price.info()
omisego_price.info()
iota_price.info()
qtum_price.info()
bitcoin_price.info()
litecoin_price.info()
ripple_price.info()
bitconnect_price.info()
monero_dataset_clean.info()
stratis_price.info()
dash_price.info()
nem_price.info()
waves_price.info()
eth_class_price.info()
neo_price.info()

"""We find that some columns have 'object' type instead of float, we have to parse them."""

for coin in datasets:
  print(coin)
  print(datasets[coin].count())

for coin in datasets:
  print(coin)
  if 'Date' in datasets[coin]:
    datasets[coin]['Date'] = pd.to_datetime(datasets[coin]['Date'])
  if 'Date(UTC)' in datasets[coin]:
      datasets[coin]['Date(UTC)'] = pd.to_datetime(datasets[coin]['Date(UTC)'])
  if 'Volume' in datasets[coin]:
    datasets[coin]['Volume'] = datasets[coin]['Volume'].astype('str')
    datasets[coin]['Volume'] = datasets[coin]['Volume'].apply(lambda x: x.replace("-","0"))
    datasets[coin]['Volume'] = datasets[coin]['Volume'].apply(lambda x: x.replace(",",""))
    datasets[coin]['Volume'] = datasets[coin]['Volume'].astype(np.float64)
  if 'Market Cap' in datasets[coin]:
    datasets[coin]['Market Cap'] = datasets[coin]['Market Cap'].astype('str')
    datasets[coin]['Market Cap'] = datasets[coin]['Market Cap'].apply(lambda x: x.replace("-","0"))
    datasets[coin]['Market Cap'] = datasets[coin]['Market Cap'].apply(lambda x: x.replace(",",""))
    datasets[coin]['Market Cap'] = datasets[coin]['Market Cap'].astype(np.float64)

"""We will now check that every value is at datetime and float types, so we can work with this data.
We detected that there are some int64 values, but they are not a problem for us, so it's fine.
"""

for coin in datasets:
  print(coin)
  print(datasets[coin].info())